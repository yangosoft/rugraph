var searchIndex = JSON.parse('{\
"rugraph":{"doc":"","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Graph","add_edge","add_node","all_simple_paths","borrow","borrow_mut","drop","from","get_neighbors","into","is_connected","is_directly_connected","new","to_dot","try_from","try_into","type_id"],"q":["rugraph","","","","","","","","","","","","","","","",""],"d":["<code>Graph</code> is actually a <code>generic</code> directed graph where each node …","Creates a new edge from node <code>from</code> to node <code>to</code> nodes <code>from</code> …","Adds a new node <code>elem</code> to the graph","Returns a <code>Vec&lt;Vec&lt;T&gt;&gt;</code> containing all the simple paths from …","","","","","Returns a vector containing the <code>neighbors</code> of node <code>from</code>","","Returns if a node <code>from</code> is connected to a node <code>to</code>","Returns if node <code>to</code> is a neighbord of <code>from</code>","","Exports the graph to a dot file. <code>file</code> must be a valid file …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[],[["vec",3,["vec"]],["vec",3]]],[[]],[[]],[[]],[[]],[[],["vec",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["string",3],["file",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Graph"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};